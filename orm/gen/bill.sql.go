// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: bill.sql

package gen

import (
	"context"
	"time"

	"github.com/lib/pq"
)

const countBillByDay = `-- name: CountBillByDay :one
select b1.count as count1, b1.amount as amount1, b2.count as count2, b2.amount as amount2
from
    (select count(*) as count, sum(amount) as amount
     from bill t1
     where t1.day = $1 and t1.t_type = 1 and t1.b_type = 1) as b1,
    (select count(*) as count, sum(amount) as amount
     from bill t2
     where t2.day = $1 and t2.t_type = 1 and t2.b_type = 2) as b2
`

type CountBillByDayRow struct {
	Count1  int64
	Amount1 int64
	Count2  int64
	Amount2 int64
}

func (q *Queries) CountBillByDay(ctx context.Context, day time.Time) (CountBillByDayRow, error) {
	row := q.db.QueryRowContext(ctx, countBillByDay, day)
	var i CountBillByDayRow
	err := row.Scan(
		&i.Count1,
		&i.Amount1,
		&i.Count2,
		&i.Amount2,
	)
	return i, err
}

const createBill = `-- name: CreateBill :exec
insert into bill
(t_type, day, b_type, amount, tag_ids)
VALUES
($1, $2, $3, $4, $5)
`

type CreateBillParams struct {
	TType  int32
	Day    time.Time
	BType  int32
	Amount int32
	TagIds []string
}

func (q *Queries) CreateBill(ctx context.Context, arg CreateBillParams) error {
	_, err := q.db.ExecContext(ctx, createBill,
		arg.TType,
		arg.Day,
		arg.BType,
		arg.Amount,
		pq.Array(arg.TagIds),
	)
	return err
}

const listBillMonth = `-- name: ListBillMonth :many
select id, t_type, day, b_type, amount, tag_ids
from bill
where date_trunc('month', day) = $1 and t_type = 2
`

func (q *Queries) ListBillMonth(ctx context.Context, Month time.Time) ([]Bill, error) {
	rows, err := q.db.QueryContext(ctx, listBillMonth, Month)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Bill
	for rows.Next() {
		var i Bill
		if err := rows.Scan(
			&i.ID,
			&i.TType,
			&i.Day,
			&i.BType,
			&i.Amount,
			pq.Array(&i.TagIds),
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listBillToday = `-- name: ListBillToday :many
select id, t_type, day, b_type, amount, tag_ids
from bill
where day = $1 and t_type = 1
`

func (q *Queries) ListBillToday(ctx context.Context, day time.Time) ([]Bill, error) {
	rows, err := q.db.QueryContext(ctx, listBillToday, day)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Bill
	for rows.Next() {
		var i Bill
		if err := rows.Scan(
			&i.ID,
			&i.TType,
			&i.Day,
			&i.BType,
			&i.Amount,
			pq.Array(&i.TagIds),
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
